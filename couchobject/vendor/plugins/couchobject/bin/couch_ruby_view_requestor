#!/usr/bin/env ruby -wKU

require 'rubygems'
require 'json'

# Highly experimental view requestor for CouchDb
# 
# >> pp db.post("_temp_view", "proc{|doc| if doc['foo'] =~ /ba/; return doc;end  }")
# #<CouchObject::Response:0x616944
#  @parsed_body=
#   {"rows"=>
#     [{"_rev"=>928806717,
#       "_id"=>"28D568C5992CBD2B4711F57225A19517",
#       "value"=>
#        {"_id"=>"28D568C5992CBD2B4711F57225A19517",
#         "_rev"=>928806717,
#         "foo"=>"baz"}},
#      {"_rev"=>-1696868121,
#       "_id"=>"601D858DB2E298EFC4BBA92A11760D1E",
#       "value"=>
#        {"_id"=>"601D858DB2E298EFC4BBA92A11760D1E",
#         "_rev"=>-1696868121,
#         "foo"=>"bar"}},
#      {"_rev"=>-2093091288,
#       "_id"=>"CABCEB3F2C8B70B3FE24A03FF6AB7A1E",
#       "value"=>
#        {"_id"=>"CABCEB3F2C8B70B3FE24A03FF6AB7A1E",
#         "_rev"=>-2093091288,
#         "foo"=>"bar"}}],
#    "offset"=>0,
#    "total_rows"=>3,
#    "view"=>"_temp_view:proc{|doc| if doc['foo'] =~ /ba/; return doc;end  }"},
#  @response=#<Net::HTTPOK 200 OK readbody=true>>

$callables = []

while cmd = ARGF.gets
  #$stderr.puts "@@@==> got: #{cmd.inspect}"
  cmd = JSON.parse(cmd)
  case cmd[0]
  when "reset"
    $callables = []
    puts "true"
    STDOUT.flush
  when "add_map_fun"
    # second arg is a string that will compile to a function
    callable = eval(cmd[1])
    if callable.respond_to?(:call)
      $callables << callable
      puts "true"
    else
      puts JSON.unparse(["error", "String must respond_to #call, eg proc{|doc| doc.title == 'foo' }"])
    end
    STDOUT.flush
  when "map_doc"
    results = []
    doc = cmd[1]
    doc.freeze
    $callables.each do |callable|
      begin
        result = callable.call(doc) 
        if result.nil?
          results << 0 # indicate no match
        elsif result == 0 # not sure if this one is correct
          results << {"value"=>0}
        else
          results << result
        end
      rescue => e
        # An error mapping the document. Indicate no match.
        results << 0
      end
    end
    puts JSON.unparse(results)
    STDOUT.flush
  else
    puts "error"
    STDOUT.flush
    exit(1)
  end
end
